#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!markdown

# Singleton Game Managers

A **Singleton Game Manager** is a design pattern that ensures only one instance of a class exists throughout the entire application. This pattern is particularly useful in game development for managing global game state, settings, and resources.

## Key Benefits:
- **Single Source of Truth**: All game data is centralized in one place
- **Global Access**: Any part of your code can access the same instance
- **Resource Management**: Efficiently manage shared resources like audio, graphics, or game state
- **Memory Efficiency**: Prevents multiple instances from consuming unnecessary memory

## How It Works:
1. **Private Constructor**: Prevents external instantiation
2. **Static Instance**: Provides global access point
3. **Lazy Initialization**: Creates the instance only when first needed

In this example, we'll create a GameManager singleton that handles screen dimensions, player health, and other global game variables.

---

#!csharp

#r "nuget: Raylib-cs, 7.0.1"

#!csharp

using System;
using System.Numerics;
using Raylib_cs;
using static Raylib_cs.Raylib;

// A Game Manager singleton class to manage the game - can be used to store global variables and methods
public sealed class GameManager
{
    #nullable enable
    private static GameManager? instance;
    
    public const string WELCOME_MESSAGE = "Hello, world!";
    public const int screenWidth = 800;
    public const int screenHeight = 600;

    public int playerHealth = 100; // Player health

    // Private constructor to prevent instantiation from outside the class
    private GameManager()
    {
        // Initialization code here
    }
    
    // Public static method to get the singleton instance
    public static GameManager Instance
    {
        get
        {
            if (instance == null)
            {
                instance = new GameManager();
            }
            return instance;
        }
    }
}

// Get the singleton instance of GameManager
GameManager GM = GameManager.Instance;

InitWindow(GameManager.screenWidth, GameManager.screenHeight, "raylib [core] example - singleton game manager");

SetTargetFPS(60);

while (!WindowShouldClose()) // Detect window close button or ESC key
{
    BeginDrawing();
    ClearBackground(Color.White);

    // Display the welcome message
    DrawText(GameManager.WELCOME_MESSAGE, GameManager.screenWidth / 2 - MeasureText(GameManager.WELCOME_MESSAGE, 20) / 2, GameManager.screenHeight / 2, 20, Color.Black);

    // Display the player health
    string healthText = "Player Health: " + GM.playerHealth;
    DrawText(healthText, 10, 10, 20, Color.Red);

    EndDrawing();
}

CloseWindow(); // Close window and OpenGL context
